{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","text","setText","wordCount","setWordCount","characterCount","setCharacterCount","sentenceCount","setSentenceCount","copiedToClipboardContainer","useRef","typeUpdate","words","split","mostUsedWords","i","word","push","count","doesWordExist","forEach","foundWord","length","getWordStats","index","keyword","onClick","copyStats","Math","floor","e","navigator","clipboard","writeText","target","innerHTML","console","log","current","classList","add","setTimeout","remove","className","value","onChange","sort","a","b","placeholder","id","reverse","join","update","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dfb75527.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n    const [text, setText] = useState('');\r\n    const [wordCount, setWordCount] = useState(0);\r\n    const [characterCount, setCharacterCount] = useState(0);\r\n    const [sentenceCount, setSentenceCount] = useState(0);\r\n    const copiedToClipboardContainer = useRef();\r\n    let typeUpdate = 1;\r\n\r\n    let words = text.split(' ');\r\n\r\n    let mostUsedWords = [];\r\n\r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n\r\n        if (i === 0 && word !== '') mostUsedWords.push({ word, count: 1 });\r\n        else {\r\n            let doesWordExist = false;\r\n\r\n            mostUsedWords.forEach((foundWord) => {\r\n                if (foundWord.word === word) {\r\n                    doesWordExist = true;\r\n                    foundWord.count++;\r\n                }\r\n            });\r\n\r\n            if (!doesWordExist && word !== '') {\r\n                mostUsedWords.push({ word, count: 1 });\r\n            }\r\n        }\r\n    }\r\n\r\n    function getWordPrecentageOfText(word) {\r\n        return Math.floor((100 / words.length) * word.count);\r\n    }\r\n\r\n    function getWordStats(index) {\r\n        let keyword;\r\n\r\n        if (index === 0) {\r\n            keyword = '1st:';\r\n        } else if (index === 1) {\r\n            keyword = '2nd:';\r\n        } else if (index === 2) {\r\n            keyword = '3rd:';\r\n        } else {\r\n            keyword = `${index + 1}:`;\r\n        }\r\n\r\n        if (mostUsedWords[index] != null) {\r\n            return (\r\n                <>\r\n                    <button onClick={copyStats}>\r\n                        {keyword} {`\"${mostUsedWords[index].word}\"`}{' '}\r\n                        {mostUsedWords[index].count}{' '}\r\n                        {`${getWordPrecentageOfText(mostUsedWords[index])}%`}\r\n                    </button>\r\n                </>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function changeText(e) {\r\n        setText(e.target.value);\r\n\r\n        setWordCount(\r\n            e.target.value === '' || e.target.value == null\r\n                ? 0\r\n                : e.target.value.split(' ').length\r\n        );\r\n\r\n        setCharacterCount(\r\n            e.target.value === '' || e.target.value == null\r\n                ? 0\r\n                : e.target.value.length\r\n        );\r\n\r\n        setSentenceCount(\r\n            e.target.value === '' || e.target.value == null\r\n                ? 0\r\n                : e.target.value.split('.').length -\r\n                      1 +\r\n                      e.target.value.split('!').length -\r\n                      1 +\r\n                      e.target.value.split('?').length -\r\n                      1\r\n        );\r\n\r\n        mostUsedWords.sort(function (a, b) {\r\n            return b.count - a.count;\r\n        });\r\n\r\n        console.log(mostUsedWords);\r\n        typeUpdate = !typeUpdate;\r\n    }\r\n\r\n    function copyStats(e) {\r\n        navigator.clipboard.writeText(e.target.innerHTML);\r\n        console.log(`Copied \"${e.target.innerHTML}\"`);\r\n\r\n        copiedToClipboardContainer.current.classList.add('open');\r\n        setTimeout(() => {\r\n            copiedToClipboardContainer.current.classList.remove('open');\r\n        }, 1000);\r\n    }\r\n\r\n    function flipText() {\r\n        setText(text.split('').reverse().join(''));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Shitty Word Counter</h1>\r\n            <textarea\r\n                value={text}\r\n                onChange={changeText}\r\n                placeholder=\"Type your text here\"\r\n                id=\"textarea\"\r\n            ></textarea>\r\n            <div className=\"controls-container\">\r\n                <h2>Controls</h2>\r\n                <label>flip text</label>\r\n                <br />\r\n                <button onClick={flipText}>\r\n                    <kbd>Ctrl</kbd> + <kbd>Alt</kbd> + f\r\n                </button>\r\n            </div>\r\n            <div className=\"stats-container\">\r\n                <button onClick={copyStats}>\r\n                    Character Count: {characterCount}\r\n                </button>\r\n                <button onClick={copyStats}>Word Count: {wordCount}</button>\r\n                <button onClick={copyStats}>\r\n                    Sentence Count: {sentenceCount}\r\n                </button>\r\n            </div>\r\n            <div className=\"patterns-container\">\r\n                <h2>Patterns</h2>\r\n                <br />\r\n                <label>Most Used Words:</label>\r\n                <div className=\"most-used-words-container\" update={typeUpdate}>\r\n                    {console.log(typeUpdate)}\r\n                    {console.log(mostUsedWords)}\r\n                    {getWordStats(0)}\r\n                    {getWordStats(1)}\r\n                    {getWordStats(2)}\r\n                </div>\r\n            </div>\r\n            <div\r\n                ref={copiedToClipboardContainer}\r\n                className=\"copied-to-clipboard-container\"\r\n            >\r\n                <label>Copied to clipboard!</label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}